---
title: "Análisis de Supervivencia con R: Capítulo 1"
author: 
  - name: Sergio M. Nava Muñoz
    id: sn
    email: nava@cimat.mx
    affiliation: 
        - id: cimat
          name: CIMAT
          city: Aguascalientes
          state: Ags
date: 2025-06-01
format: 
  revealjs:
    slide-number: true
    theme: simple
    fontsize: 1.5em
    css: style.css
    chalkboard: true
    menu: TRUE
    transition: slide
    background-transition: fade
    title-slide-attributes:
      data-background-size: 100% 100%;   
execute:
  echo: false
  warning: false
  message: false
      
---



```{r}
packages <- c("survival","asaur","survminer")
if (length(setdiff(packages, rownames(installed.packages()))) > 0) {
  install.packages(setdiff(packages, rownames(installed.packages())), repos = "http://cran.rstudio.com")
}

sapply(packages, require, character.only=TRUE)

graficar_supervivencia_individual <- function(datos) {
  if (!all(c("paciente", "tiempo", "status") %in% names(datos))) {
    stop("El data.frame debe contener las columnas: paciente, tiempo, status")
  }

  # Asegurar orden por paciente descendente (opcional, para que se vea como ejemplo original)
  datos <- datos[order(-datos$paciente), ]

  # Graficar fondo vacío
  plot(0, 0, type = "n",
       xlim = c(0, max(datos$tiempo, na.rm = TRUE) + 1),
       ylim = c(0.5, nrow(datos) + 0.5),
       xlab = "Tiempo", ylab = "Paciente",
       yaxt = "n")
  
  axis(2, at = 1:nrow(datos), labels = datos$paciente)

  # Dibujar segmentos y símbolos
  for (i in 1:nrow(datos)) {
    points(0, i, pch = 16, cex = 1.2)  
    lines(c(0, datos$tiempo[i]), c(i, i), lwd = 2)
    points(datos$tiempo[i], i,
           pch = ifelse(datos$status[i] == 1, 4, 1),
           cex = 1.5)
  }
}
```



## 1. ¿Qué es el Análisis de Supervivencia?

- Estudio del tiempo hasta que ocurre un evento de interés.
- Común en estudios clínicos, observacionales y experimentos animales.
- Ejemplos: tiempo hasta la muerte, recaída, progreso de enfermedad o respuesta a tratamiento.
- Incluye también eventos "positivos" (e.g., recuperación).

> El objetivo puede ser estimar la distribución de supervivencia, comparar grupos o estudiar factores asociados al tiempo hasta el evento.

---

## 2. Características clave

- Variable respuesta: tiempo positivo (discreto o continuo).
- Censura: información incompleta sobre el tiempo hasta el evento.

---

## 3. Tipos de censura

- **Censura a la derecha**: el evento no ha ocurrido al finalizar el seguimiento.
- **Censura a la izquierda**: el evento ocurrió antes del inicio del seguimiento.
- **Censura por intervalo**: el evento ocurrió dentro de un intervalo conocido.

---

## 4. Ejemplo: Ensayo clínico con cáncer

::: {.columns}

::: {.column width="30%" .smaller}

```{r}
# Datos de entrada manualmente extraídos de la figura
datos <- data.frame(
  paciente = 6:1,
  entrada = c(2002, 2002, 2002, 2001, 2000, 2000),
  fin      = c(2006, 2004, 2007, 2007, 2006, 2007),
  evento   = c(TRUE, TRUE, FALSE, FALSE, TRUE, FALSE)
)
datos2 <- datos[6:1,]
datos2$evento <- as.numeric(datos2$evento)
knitr::kable(datos2, label = "prueba", row.names = FALSE  )
```


:::

::: {.column width="70%"}



```{r fig.cap="Reclutamiento y seguimiento", fig.width=8, fig.height=4}
# Crear la figura
plot(0, 0, type = "n", xlim = c(2000, 2010), ylim = c(0.5, 6.5),
     xlab = "Year of entry – calendar time",  ylab = "Paciente", yaxt = "n", xaxt = "n")

# Ejes personalizados
axis(1, at = seq(2000, 2010, by = 2))
axis(2, at = 1:6, labels = 6:1, las = 1)

# Líneas verticales punteadas
abline(v = 2000, lty = 2, col = "red")
abline(v = 2002, lty = 2, col = "red")
abline(v = 2007, lty = 2, col = "red")

# Dibujar trayectorias y puntos
for (i in 1:nrow(datos)) {
  y <- i
  x0 <- datos$entrada[i]
  x1 <- datos$fin[i]
  segments(x0, y, x1, y, lwd = 2)
  points(x0, y, pch = 16, cex = 1.2)  # Punto de entrada sólido
  points(x1, y, pch = ifelse(datos$evento[i], 4, 1), cex = 1.5)  # X = evento, ◯ = censura
}


```


:::

:::



-----


## 5. Representación gráfica del seguimiento

::: {.columns}

::: {.column width="30%" .smaller}


```{r}
paciente <- 1:6
tiempo <- c(7, 6, 6, 5, 2, 4)
status <- c(0, 1, 0, 0, 1, 1)
datos_S1 <- data.frame(paciente, tiempo, status)
knitr::kable(datos_S1, caption = "Ejemplo")
```


- Círculo abierto = censura
- X = evento (muerte)


:::

::: {.column width="70%" .smaller}


```{r}
#| fig-width: 8
#| fig-height: 7
#| layout-ncol: 1

par(mfrow = c(2, 1), mar = c(4, 4, 2, 1))

graficar_supervivencia_individual(datos_S1)
ajuste <- survfit(Surv(tiempo, status) ~ 1, data = datos)
plot(ajuste, xlab="Tiempo", ylab="Probabilidad de supervivencia", main= "Curva de Supervivencia de Kaplan-Meier")
par(mfrow = c(1,1))
```


:::

:::


---



## 6. Programación en R

- Librería `survival`:
```r{}
library(survival)
Surv(tiempo, status)
```

- Este objeto puede usarse en:
  - [Surv()](https://www.rdocumentation.org/packages/survival/versions/3.5-7/topics/Surv) codifica la información de tiempo y censura.
  - [survfit()](https://www.rdocumentation.org/packages/survival/versions/3.8-3/topics/survfit.formula)  ajusta curvas de supervivencia (Kaplan-Meier).
  - [coxph()](https://www.rdocumentation.org/packages/survival/versions/3.5-7/topics/coxph) para modelos de Cox

---

### La función `Surv()` de `survival`

```{r}
#| echo: true
library(survival)

# Censura derecha
tiempos <- c(5, 8, 12, 3, 10)
evento <- c(1, 0, 1, 1, 0)  # 1 = evento, 0 = censurado

datos <- Surv(tiempos, evento)
datos
```

- Crea un objeto de clase `Surv`.
- Es la base para ajustar modelos de supervivencia.



### Visualizando `Surv()` con tipos de censura

```{r}
#| echo: true
# Censura izquierda
tiempos <- c(5, 8, 12, 3, 10)
evento <- c(1, 0, 1, 1, 0)
Surv(tiempos, evento, type = "left")

# Censura por intervalo
inferior <- c(2, 6, 7, 5, 1)
superior <- c(4, 6, 9, 6, 3)
evento <- c(3, 0, 3, 0, 3)  # 3 = intervalo
Surv(inferior, superior, type = "interval2")
```

---


### Ajuste con `survfit()`

```{r}
#| echo: true
library(survival)

# Datos con censura derecha
tiempos <- c(5, 8, 12, 3, 10)
evento <- c(1, 0, 1, 1, 0)
datos <- Surv(tiempos, evento)
print(datos)
modelo <- survfit(datos ~ 1)  # sin covariables
summary(modelo)
```

- `survfit()` ajusta una curva de Kaplan-Meier.

---

### Graficando la curva de supervivencia

```{r}
#| echo: true
plot(modelo, xlab = "Tiempo", ylab = "Supervivencia estimada",
     main = "Curva de Kaplan-Meier")
```

> Puedes usar [ggsurvplot()](https://www.rdocumentation.org/packages/survminer/versions/0.4.9/topics/ggsurvplot) del paquete `survminer` para una mejor presentación visual.


---

```{r}
#| echo: true
survminer::ggsurvplot(modelo,data=datos, xlab = "Tiempo", ylab = "Supervivencia estimada",
     title = "Curva de Kaplan-Meier")
```

---

## 8. Conjunto de datos `gastricXelox` de la biblioteca `asaur`
::: {.columns}

::: {.column width="40%" }
```{r}
#| echo: true
library(asaur)
data("gastricXelox")
```


```{r}
set.seed(157)
datos2 <- gastricXelox[sample(1:nrow(gastricXelox),replace = FALSE),]
datos2 <- data.frame(
  paciente=1:nrow(datos2),
  tiempo=datos2$timeWeeks,
  status=datos2$delta)
knitr::kable(head(datos2), caption = "Ejemplo")
```

- Tiempo: semanas hasta progresión o muerte  
- `delta = 1` si hubo evento, `0` si censurado
- Los datos se desordenaron para este ejemplo
:::

::: {.column width="60%"}
```{r}

graficar_supervivencia_individual(datos2)
```

```{r}

gastricXelox$timeMonths <- gastricXelox$timeWeeks * 7 / 30.25

km <- survfit(Surv(timeMonths, delta) ~ 1,data = gastricXelox)

plot(km, xlab="Meses", ylab="Supervivencia estimada")
```
:::

:::

---

## 9. Censura informativa vs no-informativa

- **No-informativa**: el mecanismo de censura es independiente del riesgo.
- **Informativa**: censura correlacionada con el riesgo (puede sesgar resultados).

---

## 10. Objetivos del Análisis de Supervivencia

1. Estimar la función de supervivencia \( S(t) \)
2. Comparar curvas de supervivencia entre grupos
3. Estimar el efecto de covariables sobre el tiempo hasta evento

---

## 11. Consideraciones finales

- Es fundamental distinguir entre eventos observados y censurados.
- El paquete `survival` permite un análisis flexible con curvas, modelos y tests.
- Los datos reales como `gastricXelox` permiten practicar los conceptos.

---

## 12. Ejercicio propuesto

::: {.columns}

::: {.column width="40%" .smaller }


- Usar R para:
  - Estimar la curva de supervivencia de `gastricXelox`
  - Obtener la mediana de supervivencia
  - Graficar con intervalo de confianza

```{r}
ajuste <- survfit(Surv(timeMonths, delta) ~ 1, data = gastricXelox )
summary(ajuste)

```

:::

::: {.column width="60%"}



```{r}
plot(ajuste, conf.int=TRUE, xlab="Meses", ylab="Supervivencia")

```

:::

:::



## Otros

```{r}
graficar_censura_general <- function(datos) {
  if (!all(c("paciente", "tiempo_inicio", "tiempo_fin", "tipo_censura") %in% names(datos))) {
    stop("El data.frame debe tener las columnas: paciente, tiempo_inicio, tiempo_fin, tipo_censura")
  }

  datos <- datos[order(-datos$paciente), ]

  plot(0, 0, type = "n",
       xlim = c(0, max(c(datos$tiempo_inicio, datos$tiempo_fin), na.rm = TRUE) + 1),
       ylim = c(0.5, nrow(datos) + 0.5),
       xlab = "Tiempo", ylab = "Paciente",
       yaxt = "n")
  
  axis(2, at = 1:nrow(datos), labels = datos$paciente)

  for (i in 1:nrow(datos)) {
    tipo <- datos$tipo_censura[i]
    y <- i
    t_ini <- datos$tiempo_inicio[i]
    t_fin <- datos$tiempo_fin[i]
    
    if (tipo == "observado") {
      segments(0, y, t_fin, y, lwd = 2)
      points(t_fin, y, pch = 4, cex = 1.5) # X = evento
    } else if (tipo == "derecha") {
      segments(0, y, t_ini, y, lwd = 2)
      points(t_ini, y, pch = 1, cex = 1.5) # círculo = censura a la derecha
    } else if (tipo == "izquierda") {
      arrows(t_fin, y, max(c(datos$tiempo_inicio, datos$tiempo_fin), na.rm = TRUE) + 0.5, y,
             length = 0.1, lwd = 2, code = 2) # ← indica evento ocurrió antes
      points(t_fin, y, pch = 5, cex = 1.5) # □ = censura a la izquierda
    } else if (tipo == "intervalo") {
      segments(t_ini, y, t_fin, y, lwd = 2, lty = 2)
      points(mean(c(t_ini, t_fin)), y, pch = 0, cex = 1.5) # ▢ = censura por intervalo
    }
  }
}
```


```{r}
datos <- data.frame(
  paciente = 1:6,
  tiempo_inicio = c(0, 5, 3, NA, 6, 2),
  tiempo_fin =     c(7, 5, NA, 4, NA, 2),
  tipo_censura = c("observado", "intervalo", "derecha", "izquierda", "derecha", "observado")
)
knitr::kable(datos, caption = "Ejemplo")
graficar_censura_general(datos)

```

