---
title: "An√°lisis de Datos de Tiempos de Fallo"
author: "Sergio Nava"
date: "2025-06-16"
format:
  html:
    theme: united
    toc: true
    toc-float: true
    toc-depth: 2
    number-sections: false
    toc-collapsed: true
    smooth-scroll: true
    self-contained: true  # üî¥ esta l√≠nea es la clave
    logo: figs/CIMAT.png 
execute:
  echo: true
  eval: true
bibliography: bibliografia.bib
csl: apa.csl
---

<!-- banner.html -->
<div id="custom-banner" style="background-color: white; color: white; padding: 20px; text-align: center;">
  <img src="figs/Banner_diplomado.jpg" alt="Banner" style="height: 220px; vertical-align: middle; margin-right: 1px;">

</div>

<!-- custom-header.html -->
<div id="custom-logo" style="position: absolute; top: 10px; left: 10px;">
  <img src="figs/CIMAT.png" alt="Logo CIMAT" style="height: 120px;">
</div>

 
## Introducci√≥n

En esta p√°gina se presentan las principales herramientas computacionales para llevar a cabo un an√°lisis de tiempos de vida utilizando el lenguaje de programaci√≥n R, en particular mediante el paquete `survival`. Estas funciones son fundamentales para el estudio de datos censurados y/o truncados, como suele encontrarse en bioestad√≠stica, an√°lisis de fiabilidad, y otras √°reas donde interesa modelar el tiempo hasta un evento (por ejemplo, muerte, reca√≠da o falla mec√°nica).

Aqu√≠ nos enfocamos en herramientas pr√°cticas para aplicar modelos de supervivencia en datos reales con R. Para un tratamiento te√≥rico m√°s profundo, se recomienda consultar los textos cl√°sicos de @klein2003, as√≠ como @therneau2000.

Para comenzar, es necesario cargar la biblioteca `survival`, que contiene las funciones centrales para el an√°lisis de supervivencia en R. Una exposici√≥n clara y aplicada puede encontrarse en @moore2016.

```{r}

library(survival)

```

El paquete incluye varios conjuntos de datos precargados que pueden utilizarse para ilustrar m√©todos de an√°lisis de supervivencia, entre ellos:

``` r
data(package = "survival")
```

## Conjuntos de datos del paquete `survival`

A continuaci√≥n se listan algunos de los datasets incluidos en el paquete `survival`, ampliamente utilizados para ilustrar t√©cnicas de an√°lisis de supervivencia:

| Nombre del dataset | Descripci√≥n |
|-----------------|-------------------------------------------------------|
| `lung` | Supervivencia en pacientes con c√°ncer de pulm√≥n |
| `ovarian` | Ensayo cl√≠nico de mantenimiento en pacientes con c√°ncer de ovario |
| `aml` | Datos de pacientes con leucemia mieloide aguda |
| `veteran` | Ensayo cl√≠nico en c√°ncer de pulm√≥n con dos tratamientos |
| `jasa` | Supervivencia de pacientes en lista de espera para trasplante de coraz√≥n |
| `heart` | Datos de entrada/salida de pacientes en el programa de trasplante card√≠aco |
| `pbc` | Estudio longitudinal sobre colangitis biliar primaria |
| `colon` | Datos de supervivencia en pacientes con c√°ncer de colon |
| `kidney` | Tiempo hasta el fallo de cat√©teres renales |
| `cancer` | Datos de distintos tipos de c√°ncer (datos ilustrativos) |

Puedes cargar cualquiera de estos conjuntos con `data(nombre, package = "survival")`, por ejemplo:

``` r
data(lung, package = "survival")
```

## 1. La funci√≥n `Surv`

Esta funci√≥n permite crear objetos de tipo supervivencia. Es la base para trabajar con modelos de supervivencia en R.

``` r
Surv(time, time2, event, type = c('right', 'left', 'interval', 'counting', 'interval2'), origin = 0)
```

``` r
is.Surv(x)
```

-   `time`: Representa el tiempo de inicio de la observaci√≥n. Para datos de intervalo, el primer argumento es el extremo inicial del intervalo.
-   `time2`: Representa el indicador de estado, normalmente 0 = vivo (censurado), 1 = muerto (no censurado). Otras opciones son VERDADERO/FALSO (VERDADERO = la muerte) o 1/2 (2 = muerto). Para datos con censura de intervalo, el indicador de estado es 0 = censura a la derecha, 1 = suceso ocurrido en `time`, 2 = censura a la izquierda, 3 = censura de intervalo. Este indicador puede ser omitido en el caso de que se asuma que todos los sujetos tienen el mismo estado.
-   `event`: Representa el tiempo de finalizaci√≥n de la observaci√≥n para un intervalo censurado o proceso de conteo. Se asume que los intervalos est√°n abiertos a la izquierda y cerrados a la derecha, (el principio, el final\]. Para un proceso de recuento de datos `event` indica si un acontecimiento ocurri√≥ al final del intervalo.
-   `origin`: Es una utilidad que permite trabajar bajo el enfoque de los procesos de recuento. Esta opci√≥n es usada en un modelo que contiene estratos dependientes del tiempo, para enumerar los sujetos correctamente que cambian de un estrato a otro. En raras ocasiones se suele emplear.
-   `x`: Cualquier objeto de R.

### Ejemplos

#### Cuando se observan longitudes de tiempo

::: {.callout-note icon="üß¨" title="Datos del ejemplo: lung"}
El conjunto de datos `lung` se refiere al estudio de supervivencia en pacientes con c√°ncer de pulm√≥n, recopilado por el *North Central Cancer Treatment Group*.

Contiene **228 registros** y **10 variables**, que son:

-   `inst`: c√≥digo de la instituci√≥n m√©dica\
-   `time`: tiempo de supervivencia o censura (en d√≠as)\
-   `status`: estado del paciente (1 = censurado, 2 = fallecido)\
-   `age`: edad del paciente (en a√±os)\
-   `sex`: sexo del paciente (1 = hombre, 2 = mujer)\
-   `ph.ecog`: puntaje ECOG (estado funcional del paciente)\
-   `ph.karno`: puntaje Karnofsky seg√∫n el m√©dico\
-   `pat.karno`: puntaje Karnofsky seg√∫n el paciente\
-   `meal.cal`: calor√≠as ingeridas diariamente\
-   `wt.loss`: p√©rdida de peso en los √∫ltimos seis meses (en libras)

Este conjunto permite analizar c√≥mo variables cl√≠nicas y funcionales se asocian con el tiempo de supervivencia en pacientes con c√°ncer avanzado.
:::

```{r}


data(cancer, package="survival")
head(lung)
```

```{r}

Surv(lung$time, lung$status) 
```

#### Cuando se registran tiempos de entrada y salida

El segundo conjunto de datos usado como ejemplo en este caso es el conjunto ‚Äúheart", contiene informaci√≥n sobre supervivencia de 172 pacientes en la lista de espera del programa de transplantes de coraz√≥n del hospital de Standford. El registro se muestra como sigue en la siguiente figura.

```{r}

head(heart)
```

En este caso cada individuo se incorpora al estudio en el instante que indica la variable `start`, y abandona el estudio en el instante indicado por `stop`. Es decir los pacientes entran en el estudio de manera escalonada, esta es la forma habitual en que los individuos son incorporados en estudios de Supervivencia, a diferencia de en estudios de Fiabilidad, donde todos los sujetos entran en estudio a la vez. No s√≥lo estamos interesados en la longitud del intervalo que determina el tiempo de vida si tambi√©n de d√≥nde est√° localizado. La variable `event` nos dice de cada individuo si est√° vivo o falleci√≥ al final del estudio. Adem√°s se incluye otro tipo de informaci√≥n como la edad del individuo (`age`), si se le ha realizado un transplante o no (`transplant`) y si ha recibido otro tipo de cirug√≠a antes (`surgery`). Ahora el resultado de la funci√≥n `Surv` es el objeto que se muestra, en parte, a continuaci√≥n.

```{r}

with(heart,Surv(start, stop, event))
```

### Ejercicio

-   Carga el dataset `ovarian` y construye el objeto `Surv(futime, fustat)`. ¬øQu√© tipo de censura presentan los datos?

## 2. La funci√≥n `survfit`

Permite calcular curvas de supervivencia no param√©tricas (Kaplan-Meier o Fleming-Harrington) o estimar curvas ajustadas a modelos de Cox.

``` r
survfit(formula, data, type = "kaplan-meier")
```

-   `formula`: Objeto que define la f√≥rmula del modelo a ajustar.

-   `data`: Conjunto de datos que se utiliza para interpretar las variables mencionadas en los argumentos `formula`, `subset` y `weights`.

-   `weights`: Pesos aplicados a cada caso u observaci√≥n.

-   `subset`: Expresi√≥n que indica un subconjunto de las filas del conjunto de datos que se utilizar√°n en la estimaci√≥n. Puede ser:

    -   un vector l√≥gico (de longitud igual al n√∫mero de observaciones),
    -   un vector num√©rico que indique los √≠ndices de observaciones a incluir (o excluir si son negativos),
    -   un vector de caracteres con los nombres de las filas. Por defecto, se incluyen todas las observaciones.

-   `na.action`: Funci√≥n utilizada para tratar los valores perdidos (`NA`). Se aplica al marco del modelo despu√©s de aplicar `subset`. Por defecto es `options()$na.action`. Un valor com√∫n es `na.omit`, que excluye las observaciones con datos faltantes.

-   `times`: Vector de tiempos en los cuales se eval√∫a la curva de supervivencia. Por defecto, la curva se eval√∫a en cada valor distinto del vector de tiempos especificado en `formula`.

-   `type`: Cadena de caracteres que especifica el tipo de curva de supervivencia a estimar. Los valores posibles son:

    -   `"kaplan-meier"` (por defecto),
    -   `"fleming-harrington"`,
    -   `"fh2"` (cuando se proporciona una f√≥rmula).

-   `error`: Cadena de caracteres que indica el m√©todo para estimar el error est√°ndar. Los valores permitidos son:

    -   `"greenwood"`: utiliza la f√≥rmula de Greenwood,
    -   `"tsiatis"`: utiliza la f√≥rmula de Tsiatis. Basta con especificar la primera letra del nombre.

-   `conf.type`: Tipo de intervalo de confianza. Las opciones son:

    -   `"none"`: no se calculan intervalos de confianza,
    -   `"plain"`: intervalo est√°ndar de la forma `curve ¬± k √ó se(curve)`,
    -   `"log"` (por defecto): intervalos basados en `log(survival)`,
    -   `"log-log"`: intervalos basados en `log(-log(survival))`.

-   `start.time`: Valor num√©rico que indica el instante de tiempo a partir del cual comenzar a calcular la supervivencia. La curva estimada ser√° condicional a haber sobrevivido hasta ese punto.

-   `conf.int`: Nivel de confianza para los intervalos calculados. Por defecto, se usa `0.95` para construir intervalos al 95%.

-   `se.fit`: Valor l√≥gico (`TRUE` o `FALSE`) que indica si deben calcularse los errores est√°ndar de la estimaci√≥n. Su valor por defecto es `TRUE`.

### Resultados

-   `n`: N√∫mero total de sujetos incluidos en cada curva de supervivencia.

-   `time`: Instantes temporales en los que la curva de supervivencia presenta un salto (es decir, ocurre un evento).

-   `n.risk`: N√∫mero de sujetos en riesgo justo antes de cada tiempo `t`.

-   `n.event`: N√∫mero de eventos (sucesos observados) que ocurren en cada tiempo `t`.

-   `n.enter`: Solo para datos de procesos de recuento. Indica cu√°ntos sujetos entran al conjunto de riesgo en el tiempo `t`.

-   `n.censor`: Solo para procesos de recuento. Representa el n√∫mero de sujetos que salen del conjunto de riesgo sin haber experimentado el evento, en el tiempo `t`.

-   `surv`: Estimaci√≥n de la funci√≥n de supervivencia justo despu√©s del tiempo `t` (es decir, en `t+0`).

-   `std.err`: Error est√°ndar asociado a la estimaci√≥n de la funci√≥n de supervivencia o del riesgo acumulado, seg√∫n el tipo de salida.

-   `upper`: L√≠mite superior del intervalo de confianza para la funci√≥n de supervivencia.

-   `lower`: L√≠mite inferior del intervalo de confianza para la funci√≥n de supervivencia.

-   `strata`: Si se estiman m√∫ltiples curvas (por ejemplo, por grupos), esta componente indica el n√∫mero de elementos de `time`, `surv`, etc. que corresponden a cada una. Los nombres asociados sirven como etiquetas de las curvas.

### Ejemplo

::: {.callout-note icon="üìä" title="Datos del ejemplo: aml"}
El conjunto de datos utilizado en este ejemplo, llamado `aml`, se refiere al an√°lisis de supervivencia en pacientes con leucemia mieloide aguda.

-   `time`: tiempo hasta el evento (supervivencia o censura),
-   `status`: indicador del estado del evento (1 = evento, 0 = censura),
-   `x`: grupo de tratamiento (si se mantuvo o no la quimioterapia).

Este conjunto de datos permite explorar la siguiente pregunta cl√≠nica:\
**¬øDeber√≠a extenderse el tratamiento de quimioterapia a ciclos adicionales para mejorar la supervivencia?**
:::

```{r}

head(aml)
leukemia.surv <- survfit(Surv(time, status) ~ x, data = aml)
plot(leukemia.surv, lty = 2:3)
legend(100,.9,c("Maintenance","No Maintenance"),lty=2:3)
title("Kaplan-Meier Curves\nfor AML Maintenance Study")
lsurv2<-survfit(Surv(time,status)~x,aml, type='fleming')
plot(lsurv2,lty=2:3,fun="cumhaz",xlab="Months",ylab="Cumulative Hazard")
```

Observando la curva de supervivencia que hemos obtenido , vemos como en los 50 primeros meses de tratamiento de la enfermedad con quimioterapia, la supervivencia de estos pacientes aumentaba progresivamente, hasta mantenerse casi estable a partir de ese tiempo.

## 3. La funci√≥n `survexp`

Devuelve la supervivencia esperada de una cohorte de sujetos, o la supervivencia esperada para cada sujeto de forma individual.

``` r
survexp(formula, data, weights, subset, na.action, times, cohort=TRUE,
conditional=FALSE, ratetable=survexp.us, scale=1, npoints,
se.fit, model=FALSE, x=FALSE, y=FALSE)
```

-   `Formula`. F√≥rmula o modelo antes descrito.

### Ejemplo

::: {.callout-note icon="üìã" title="Datos del ejemplo: pbc"}

El conjunto de datos `pbc` (*Primary Biliary Cirrhosis*) proviene de un estudio cl√≠nico de la *Mayo Clinic* sobre una enfermedad hep√°tica autoinmune cr√≥nica. Contiene informaci√≥n cl√≠nica y de seguimiento sobre pacientes con esta enfermedad.

Incluye **418 observaciones** y las siguientes variables principales:

- `id`: identificador del paciente  
- `time`: tiempo de seguimiento en d√≠as  
- `status`: indicador del evento (0 = censurado, 1 = trasplante, 2 = muerte)  
- `trt`: grupo de tratamiento (1 = D-penicilamina, 2 = placebo)  
- `age`: edad del paciente en a√±os  
- `sex`: sexo del paciente (`"m"` para masculino, `"f"` para femenino)  
- `ascites`: presencia de ascitis (0 = no, 1 = s√≠)  
- `hepato`: presencia de hepatomegalia (0 = no, 1 = s√≠)  
- `spiders`: presencia de ara√±as vasculares (0 = no, 1 = s√≠)  
- `edema`: grado de edema perif√©rico  
- `bili`: nivel de bilirrubina s√©rica (mg/dL)  
- `chol`: nivel de colesterol s√©rico (mg/dL)  
- `albumin`: nivel de alb√∫mina s√©rica (g/dL)  
- `copper`: nivel de cobre s√©rico (mcg/dL)  
- `alk.phos`: fosfatasa alcalina (U/L)  
- `ast`: transaminasa glut√°mico oxalac√©tica (SGOT/AST)  
- `trig`: triglic√©ridos (mg/dL)  
- `platelet`: conteo de plaquetas (mil/mm¬≥)  
- `protime`: tiempo de protrombina (segundos)  
- `stage`: estadio histol√≥gico de la enfermedad (1 a 4)

Este conjunto permite modelar la supervivencia de pacientes hep√°ticos con m√∫ltiples variables cl√≠nicas y de laboratorio, y comparar dicha supervivencia con la de la poblaci√≥n general mediante tablas de vida.

:::



```{r}

head(pbc)
```

#### Resultado

```{r}
# Cargar librer√≠a y datos
library(survival)
data(pbc)

# Preparar las variables necesarias
pbc$age_years <- pbc$age                 # edad ya viene en a√±os
pbc$year <- 1974                         # a√±o promedio de inicio del estudio
pbc$sex <- factor(ifelse(pbc$sex == "m", "male", "female"))  # convertir a formato requerido

# Estimar supervivencia esperada usando la tabla de vida de EE.UU.
fit_exp <- survexp(Surv(time / 365.25, status == 2) ~ 1,
                   ratetable = survexp.us,
                   data = pbc,
                   times = seq(0, 15, by = 1),
                   cohort = TRUE)  # tiempos en a√±os

# Mostrar resultados
fit_exp
```

### Comparaci√≥n con curva Kaplan-Meier

```{r}
# Estimar curva KM observada
fit_km <- survfit(Surv(time / 365.25, status == 2) ~ 1, data = pbc)

# Graficar ambas curvas
plot(fit_km, col = "blue", xlab = "A√±os", ylab = "Supervivencia", lty = 1,
     main = "Supervivencia Observada vs Esperada")
lines(fit_exp$time, fit_exp$surv, col = "red", lty = 2)

legend("topright", legend = c("Kaplan-Meier (observada)", "Esperada (EE.UU.)"),
       col = c("blue", "red"), lty = 1:2)
```

Este an√°lisis compara la supervivencia observada en el estudio `pbc` con la supervivencia esperada de la poblaci√≥n general de EE.UU., emparejada por edad, sexo y a√±o de inicio.


## 4. La funci√≥n `survdiff()`

Permite realizar pruebas de comparaci√≥n entre curvas de supervivencia de distintos grupos mediante pruebas de rango, como la prueba log-rank o sus extensiones ponderadas (@harrington1982).

```r
survdiff(formula, data, subset, weights, na.action, rho = 0)
```

- `formula`: f√≥rmula del tipo `Surv(tiempo, estado) ~ grupo`, donde el grupo define la variable categ√≥rica a comparar.  
- `rho`: par√°metro de ponderaci√≥n; `rho = 0` da la prueba log-rank est√°ndar; valores positivos asignan m√°s peso a eventos tard√≠os.  
- `data`: conjunto de datos donde se encuentran las variables.  
- `weights`: pesos opcionales para cada observaci√≥n.

### Ejemplo

::: {.callout-note icon="üìã" title="Datos del ejemplo: lung"}

El conjunto de datos `lung` proviene del *North Central Cancer Treatment Group* y contiene informaci√≥n sobre la supervivencia de pacientes con c√°ncer de pulm√≥n. El dataset incluye 228 registros con las siguientes variables principales:

- `time`: tiempo de observaci√≥n (en d√≠as)  
- `status`: estado del paciente al final del estudio (1 = censurado, 2 = fallecido)  
- `sex`: sexo del paciente (1 = hombre, 2 = mujer)  
- `age`: edad en a√±os  
- `ph.ecog`, `ph.karno`, `pat.karno`: medidas del estado funcional  
- `meal.cal`, `wt.loss`: calor√≠as ingeridas y p√©rdida de peso reciente  

:::

```{r}

head(lung)
```

### Comparaci√≥n de supervivencia entre sexos

```{r}

data(cancer, package = "survival")

# Comparar curvas por sexo con prueba log-rank (rho = 0)
survdiff(Surv(time, status == 2) ~ sex, data = lung)
```

### Comparaci√≥n con ponderaci√≥n de Fleming-Harrington (rho = 1)

```{r}
# Prueba log-rank ponderada, con m√°s peso a diferencias en tiempos tard√≠os
survdiff(Surv(time, status == 2) ~ sex, data = lung, rho = 1)
```

### Visualizaci√≥n con curvas Kaplan‚ÄìMeier

```{r}
fit_km <- survfit(Surv(time, status == 2) ~ sex, data = lung)

plot(fit_km, col = c("blue", "red"), lty = 1:2,
     xlab = "D√≠as", ylab = "Supervivencia",
     main = "Supervivencia por sexo")
legend("bottomleft", legend = c("Hombres", "Mujeres"),
       col = c("blue", "red"), lty = 1:2)
```

## 5. La funci√≥n `survreg()`

La funci√≥n `survreg()` permite ajustar **modelos param√©tricos de supervivencia**. A diferencia del modelo de Cox, que es semiparam√©trico, aqu√≠ se especifica la distribuci√≥n del tiempo de supervivencia. Es √∫til cuando se desea una interpretaci√≥n expl√≠cita del efecto temporal o cuando la funci√≥n de riesgo se ajusta bien a una distribuci√≥n conocida (Weibull, exponencial, log-normal, etc.).

```r
survreg(formula, data, subset, weights, na.action, dist = "weibull", scale = 1)
```

- `formula`: especifica la relaci√≥n entre la variable de supervivencia y las covariables.
- `data`: conjunto de datos que contiene las variables.
- `dist`: distribuci√≥n param√©trica a utilizar. Puede ser `"weibull"`, `"exponential"`, `"lognormal"`, `"loglogistic"`, `"gaussian"`, entre otras.
- `scale`: par√°metro de escala (opcional).
- `weights`, `subset`, `na.action`: argumentos est√°ndar para manejo de subconjuntos, pesos o valores faltantes.

### Ejemplo

::: {.callout-note icon="üìã" title="Datos del ejemplo: lung"}

El conjunto `lung` contiene informaci√≥n sobre pacientes con c√°ncer de pulm√≥n. Las variables relevantes para este modelo incluyen:

- `time`: tiempo hasta el evento (en d√≠as)  
- `status`: indicador del evento (1 = censurado, 2 = fallecido)  
- `age`: edad del paciente  
- `sex`: sexo (1 = hombre, 2 = mujer)

:::

```{r}
# Ajuste de modelo exponencial
fit_exp <- survreg(Surv(time, status == 2) ~ age + sex, data = lung, dist = "exponential")
summary(fit_exp)
```

### Cambio de distribuci√≥n

```{r}
# Ajuste con distribuci√≥n log-normal
fit_ln <- survreg(Surv(time, status == 2) ~ age + sex, data = lung, dist = "lognormal")
summary(fit_ln)
```

### Comparaci√≥n por AIC

```{r}
AIC(fit_exp, fit_ln)
```

Esto permite determinar cu√°l modelo se ajusta mejor a los datos.

### Interpretaci√≥n

Los coeficientes estimados en `survreg()` se interpretan en el marco de una regresi√≥n acelerada del tiempo de falla (**Accelerated Failure Time Model**), es decir, una multiplicaci√≥n del tiempo esperado de supervivencia por un factor exponencial del predictor.



Para una discusi√≥n detallada sobre modelos param√©tricos de supervivencia, consulta @klein2003 y @therneau2000.

## 6. La funci√≥n `coxph()`

La funci√≥n `coxph()` ajusta el modelo de regresi√≥n de Cox (modelo de riesgos proporcionales), ampliamente utilizado en an√°lisis de supervivencia. Para una explicaci√≥n computacional detallada, v√©ase @moore2016, cap√≠tulo 4. Es un modelo **semiparam√©trico**, ya que no especifica la forma funcional de la l√≠nea base de la funci√≥n de riesgo, pero estima los efectos relativos de las covariables.

```r
coxph(formula, data, weights, subset, na.action, ties = "efron", ...)
```

- `formula`: especifica la relaci√≥n entre `Surv(tiempo, evento)` y las covariables.
- `data`: marco de datos con las variables.
- `ties`: m√©todo para manejar empates (opciones comunes: `"efron"` [por defecto], `"breslow"`, `"exact"`).
- `weights`, `subset`, `na.action`: argumentos est√°ndar para subconjuntos, pesos y manejo de datos faltantes.

### Ejemplo

::: {.callout-note icon="üìã" title="Datos del ejemplo: lung"}

El dataset `lung` contiene datos sobre pacientes con c√°ncer de pulm√≥n. Entre las variables relevantes:

- `time`: tiempo de observaci√≥n (d√≠as)  
- `status`: 1 = censurado, 2 = fallecido  
- `age`: edad del paciente  
- `sex`: 1 = hombre, 2 = mujer  

:::

```{r}
# Ajustar un modelo de Cox
fit_cox <- coxph(Surv(time, status == 2) ~ age + sex, data = lung)
summary(fit_cox)
```

### Interpretaci√≥n

En este modelo, los coeficientes estimados representan el **logaritmo del hazard ratio**. Un hazard ratio mayor que 1 indica mayor riesgo del evento asociado a esa covariable, mientras que uno menor que 1 indica menor riesgo.

```{r}
exp(coef(fit_cox))        # hazard ratios
confint(fit_cox)          # intervalos de confianza
```

### Evaluaci√≥n de ajuste

```{r}
# Evaluar bondad de ajuste
cox.zph(fit_cox)          # prueba de proporcionalidad
plot(survfit(fit_cox), xlab = "D√≠as", ylab = "Supervivencia")
```



El modelo de regresi√≥n de Cox fue introducido por Cox (1972) y es ampliamente tratado en @therneau2000 y @klein2003.

## 7. La funci√≥n `survfit.coxph()`

Una vez ajustado un modelo de Cox con `coxph()`, es posible estimar curvas de supervivencia **ajustadas** para valores espec√≠ficos de las covariables mediante `survfit()` aplicado al modelo ajustado. Esto permite visualizar la supervivencia predicha para diferentes perfiles de paciente.

```r
survfit(object, newdata, se.fit = TRUE, conf.int = 0.95)
```

- `object`: objeto resultante de `coxph()`.
- `newdata`: marco de datos que especifica los valores de las covariables para los cuales se desea predecir la supervivencia.
- `se.fit`: si se deben calcular los errores est√°ndar.
- `conf.int`: nivel de confianza para los intervalos.

### Ejemplo

```{r}
# Ajustar modelo de Cox
fit_cox <- coxph(Surv(time, status == 2) ~ age + sex, data = lung)

# Estimar curva de supervivencia para un perfil espec√≠fico
nuevo_paciente <- data.frame(age = 60, sex = 1)
fit_surv <- survfit(fit_cox, newdata = nuevo_paciente)

# Graficar la curva de supervivencia estimada
plot(fit_surv, xlab = "D√≠as", ylab = "Supervivencia estimada",
     main = "Curva de supervivencia estimada para paciente masculino de 60 a√±os")
```

### Tabla de supervivencia estimada

```{r}
# Mostrar una tabla resumen con tiempo y supervivencia estimada
head(data.frame(
  Tiempo = fit_surv$time,
  Supervivencia = round(fit_surv$surv, 4),
  `L√≠mite inferior` = round(fit_surv$lower, 4),
  `L√≠mite superior` = round(fit_surv$upper, 4)
), 10)
```

### Comparaci√≥n entre perfiles

Tambi√©n es posible comparar curvas para distintos perfiles:

```{r}
nuevo_pacientes <- data.frame(
  age = c(60, 60),
  sex = c(1, 2)  # hombre vs mujer
)

fit_comparado <- survfit(fit_cox, newdata = nuevo_pacientes)
plot(fit_comparado, col = c("blue", "red"), lty = 1:2,
     xlab = "D√≠as", ylab = "Supervivencia",
     main = "Supervivencia ajustada por sexo a edad 60")
legend("bottomleft", legend = c("Hombre", "Mujer"),
       col = c("blue", "red"), lty = 1:2)
```

### Interpretaci√≥n

Este tipo de predicci√≥n es √∫til para generar estimaciones personalizadas de supervivencia condicional, y es ampliamente utilizado en aplicaciones cl√≠nicas para comunicar pron√≥sticos basados en modelos multivariados.



La interpretaci√≥n y uso de curvas ajustadas en el modelo de Cox est√° discutida en @therneau2000.

## 8. La funci√≥n `basehaz()`

La funci√≥n `basehaz()` permite extraer la **funci√≥n de riesgo acumulado base** (*baseline cumulative hazard*) a partir de un modelo de Cox ajustado con `coxph()`. Esta funci√≥n es √∫til para visualizar c√≥mo se acumula el riesgo a lo largo del tiempo en ausencia de covariables.

```r
basehaz(fit, centered = TRUE)
```

- `fit`: modelo ajustado mediante `coxph()`.
- `centered`: si es `TRUE` (por defecto), el riesgo acumulado se estima para un individuo promedio (valores medios de las covariables). Si se establece en `FALSE`, el riesgo no se centra y refleja los valores brutos.

### Ejemplo

```{r}
# Ajustar modelo de Cox
fit_cox <- coxph(Surv(time, status == 2) ~ age + sex, data = lung)

# Extraer riesgo acumulado base
haz_base <- basehaz(fit_cox, centered = TRUE)
```

### Tabla de riesgo acumulado

```{r}
# Mostrar primeras filas como tabla
head(data.frame(
  Tiempo = haz_base$time,
  `Riesgo acumulado` = round(haz_base$hazard, 4)
), 10)
```

### Visualizaci√≥n

```{r}
# Graficar funci√≥n de riesgo acumulado base
plot(haz_base$time, haz_base$hazard, type = "l",
     xlab = "D√≠as", ylab = "Riesgo acumulado",
     main = "Funci√≥n de riesgo acumulado base")
```

### Interpretaci√≥n

La funci√≥n de riesgo acumulado es clave en el modelo de Cox, ya que permite reconstruir la funci√≥n de supervivencia predicha cuando se combina con los efectos de las covariables. Una pendiente m√°s pronunciada en la curva indica mayor ocurrencia de eventos en esa regi√≥n del tiempo.



Una descripci√≥n t√©cnica del c√°lculo e interpretaci√≥n de la funci√≥n de riesgo acumulado puede encontrarse en @therneau2000.

## 9. La funci√≥n `residuals.coxph()`

La funci√≥n `residuals.coxph()` permite obtener diferentes tipos de **residuos** a partir de un modelo de Cox ajustado con `coxph()`. Estos residuos son √∫tiles para diagnosticar el ajuste del modelo, detectar observaciones influyentes o evaluar supuestos.

```r
residuals(object, type = c("martingale", "deviance", "schoenfeld", "dfbeta", "score"))
```

- `object`: modelo ajustado mediante `coxph()`.
- `type`: tipo de residuo a calcular:
  - `"martingale"`: para evaluar el ajuste del modelo
  - `"deviance"`: transformaci√≥n sim√©trica de los residuos de martingala
  - `"schoenfeld"`: usados para evaluar el supuesto de riesgos proporcionales
  - `"dfbeta"`: influencia de cada observaci√≥n en los coeficientes
  - `"score"`: residuo de score para cada observaci√≥n

### Ejemplo

```{r}
# Ajustar modelo de Cox
fit_cox <- coxph(Surv(time, status == 2) ~ age + sex, data = lung)

# Calcular residuos de martingala
res_mart <- residuals(fit_cox, type = "martingale")
```

### Tabla de residuos

```{r}
# Mostrar los primeros residuos de martingala
head(data.frame(
  ID = 1:length(res_mart),
  `Residuo martingala` = round(res_mart, 4)
), 10)
```

### Visualizaci√≥n del ajuste

```{r}
# Residuo martingala vs edad
plot(lung$age, res_mart, xlab = "Edad", ylab = "Residuo de martingala",
     main = "Diagn√≥stico de ajuste (edad vs residuo)")
abline(h = 0, lty = 2, col = "gray")
```

### Interpretaci√≥n

- Residuos **de martingala** cercanos a 0 indican buen ajuste.
- Valores extremos (positivos o negativos) pueden indicar **mal ajuste o valores at√≠picos**.
- La relaci√≥n de los residuos con covariables puede revelar **no linealidades** o **necesidad de transformaci√≥n**.



Para una explicaci√≥n detallada de los residuos diagn√≥sticos en modelos de Cox, consulta @therneau2000.


## 10. La funci√≥n `cox.zph()`

La funci√≥n `cox.zph()` permite evaluar el **supuesto de riesgos proporcionales** en el modelo de Cox. Este supuesto implica que el efecto de las covariables sobre la raz√≥n de riesgos es constante a lo largo del tiempo.

Este diagn√≥stico se basa en los **residuos de Schoenfeld**, y puede visualizarse gr√°ficamente junto con una prueba estad√≠stica de correlaci√≥n entre el tiempo y el residuo.

```r
cox.zph(fit, transform = "rank", terms = TRUE, global = TRUE)
```

- `fit`: modelo ajustado con `coxph()`.
- `transform`: tipo de transformaci√≥n del tiempo para el test (por defecto `"rank"`).
- `terms`: si se debe aplicar el test individual a cada covariable.
- `global`: si se incluye una prueba conjunta para todo el modelo.

### Ejemplo

```{r}
# Ajustar modelo de Cox
fit_cox <- coxph(Surv(time, status == 2) ~ age + sex, data = lung)

# Evaluar el supuesto de riesgos proporcionales
zph_test <- cox.zph(fit_cox)
zph_test
```

### Visualizaci√≥n

```{r}
# Gr√°fico de residuos de Schoenfeld
plot(zph_test, var = "age", resid = TRUE,
     xlab = "Tiempo transformado", ylab = "Residuo de Schoenfeld",
     main = "Evaluaci√≥n de proporcionalidad para 'age'")
abline(h = 0, col = "red", lty = 2)
```

```{r}
# Otro ejemplo: para 'sex'
plot(zph_test, var = "sex", resid = TRUE,
     main = "Evaluaci√≥n de proporcionalidad para 'sex'")
```

### Interpretaci√≥n

- Si la curva estimada es **horizontal y cercana a cero**, se cumple el supuesto.
- Si hay una tendencia sistem√°tica en el tiempo, el efecto **no es proporcional**.
- El valor `p` asociado a cada covariable permite formalizar el test:
  - `p < 0.05` ‚Üí evidencia contra el supuesto de proporcionalidad.
  - `p > 0.05` ‚Üí no hay evidencia suficiente para rechazarlo.



El m√©todo de evaluaci√≥n del supuesto de riesgos proporcionales mediante residuos de Schoenfeld se encuentra detallado en @therneau2000.

## 11. La funci√≥n `strata()`

La funci√≥n `strata()` se utiliza dentro de una f√≥rmula de modelo en `coxph()` para indicar que una o m√°s variables deben tratarse como **estratos**. Esto permite ajustar un modelo de Cox donde el efecto de ciertas variables **no se modela directamente**, sino que se **permite que la funci√≥n de riesgo base var√≠e por estrato**.

Esto es especialmente √∫til cuando una covariable **no cumple el supuesto de riesgos proporcionales** pero se desea conservar su estructura en el modelo.

```r
coxph(Surv(tiempo, evento) ~ covariables + strata(estrato), data = datos)
```

- `strata(...)`: se coloca dentro de la f√≥rmula para indicar que las curvas de riesgo base deben estimarse por separado para cada nivel del estrato.

### Ejemplo

```{r}
# Modelo con estratificaci√≥n por instituci√≥n
fit_strat <- coxph(Surv(time, status == 2) ~ age + strata(inst), data = lung)
summary(fit_strat)
```

En este ejemplo, la variable `inst` representa diferentes instituciones m√©dicas. Al usarla como estrato, se permite que cada instituci√≥n tenga su propia curva de riesgo base, pero se estima un efecto com√∫n de la edad en todos los grupos.

### Comparaci√≥n con modelo sin estratificaci√≥n

```{r}
fit_no_strat <- coxph(Surv(time, status == 2) ~ age + inst, data = lung)
```

Este segundo modelo estima un coeficiente para cada nivel de `inst`, asumiendo proporcionalidad, lo cual puede ser inadecuado si el supuesto no se cumple.

### Visualizaci√≥n

```{r}
plot(survfit(fit_strat), col = 1:3, lty = 1,
     xlab = "D√≠as", ylab = "Supervivencia",
     main = "Curvas estratificadas por instituci√≥n")
legend("bottomleft", legend = levels(factor(lung$inst)), col = 1:3, lty = 1)
```

### Interpretaci√≥n

La estratificaci√≥n permite controlar por una variable que afecta la forma del riesgo base pero **no interesa modelar directamente su efecto**. As√≠, se mejora la validez del modelo para otras covariables de inter√©s.



El uso de estratos en modelos de Cox est√° ampliamente discutido en @therneau2000 y es una herramienta clave para relajar el supuesto de riesgos proporcionales.



## Referencias

::: {#refs}
:::
